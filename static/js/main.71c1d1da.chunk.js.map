{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","console","log","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAA2D,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,QAAQC,EAAU,EAAVA,SAS3D,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAS,UAAU,IAAnC,UACE,qBAAKE,UAAU,QAAQC,IAAOL,EAAKK,IAAKC,IAAI,cAC5C,qBAAKF,UAAU,OAAOG,QAXd,WACVJ,GACAF,EAAaD,IASkCK,IAAM,iBAAiBC,IAAI,kBCXtF,IAAME,EAAW,CACf,CAAC,IAAM,oBAAsBC,SAAS,GACtC,CAAC,IAAM,oBAAsBA,SAAS,GACtC,CAAC,IAAM,kBAAoBA,SAAS,GACpC,CAAC,IAAM,oBAAsBA,SAAS,GACtC,CAAC,IAAM,oBAAsBA,SAAS,GACtC,CAAC,IAAM,mBAAqBA,SAAS,IA8FxBC,MA1Ff,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAyBF,mBAAS,GAAlC,mBAAMG,EAAN,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,MAAzC,mBAAMK,EAAN,KAAgBC,EAAhB,KACA,EAAgCN,mBAAS,MAAzC,mBAAMO,EAAN,KAAgBC,EAAhB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAa,WACjB,IAAMC,EAAgB,UAAId,EAAcA,GACrCe,MAAK,kBAAMC,KAAKC,SAAU,MAC1BC,KAAI,SAAC1B,GAAD,mBAAC,eAAYA,GAAb,IAAmB2B,GAAIH,KAAKC,cAEjCR,EAAa,MACbE,EAAa,MAEbN,EAASS,GACTP,EAAS,IAGPd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAOiB,EAAajB,IAK/C4B,qBAAU,WAELZ,GAAWE,IACZE,GAAY,GACTJ,EAAUX,KAAMa,EAAUb,KAC3BQ,GAAS,SAAAgB,GACP,OAAOA,EAAUH,KAAI,SAAA1B,GACnB,OAAGA,EAAKK,MAAMW,EAAUX,IAEtB,2BAAUL,GAAV,IAAgBS,SAAQ,IAKjBT,QAIb8B,KAIAC,YAAW,kBAAKD,MAAY,QAIhC,CAACd,EAAUE,IAGbc,QAAQC,IAAIrB,GAEZ,IAAMkB,EAAW,WACfb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAIA,EAAU,KAChCd,GAAY,IAQd,OALAQ,qBAAU,WACNP,MAEF,IAGA,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAAUc,EAAlB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEAA,KAAQA,EACRC,aAAcA,EACdC,QAASF,IAAOgB,GAAWhB,IAAOkB,GAAYlB,EAAKS,QACnDN,SAAUA,GAJLH,EAAK2B,SAQd,yCAAYb,SC9FlBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.71c1d1da.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({card, handleChoice,flipped,disabled}){\r\n\r\n    const handleClick=()=>{\r\n        if(!disabled){\r\n            handleChoice(card)\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"card\" >\r\n            <div className={flipped? \"flipped\":\" \"}>\r\n              <img className=\"front\" src = {card.src} alt=\"cardFront\"/>\r\n              <img className=\"back\" onClick= {handleClick} src = \"/img/cover.png\" alt=\"cardBack\"/>\r\n            </div>\r\n\r\n          </div>\r\n    )\r\n}","import './App.css'\nimport { useEffect, useState } from 'react'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages=[\n  {\"src\":\"/img/helmet-1.png\" , matched: false},\n  {\"src\":\"/img/potion-1.png\" , matched: false},\n  {\"src\":\"/img/ring-1.png\" , matched: false},\n  {\"src\":\"/img/scroll-1.png\" , matched: false},\n  {\"src\":\"/img/shield-1.png\" , matched: false},\n  {\"src\":\"/img/sword-1.png\" , matched: false}\n]\n\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const[turns, setTurns] = useState(0)\n  const[choiceOne,setChoiceOne] = useState(null)\n  const[choiceTwo,setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n  \n  \n  const shuffleCards=() =>{\n    const shuffledCards = [...cardImages,...cardImages]\n      .sort(()=>  Math.random() -0.5)\n      .map((card)=>({...card, id: Math.random()}))\n  \n      setChoiceOne(null)\n      setChoiceTwo(null)\n          \n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  const handleChoice = (card) =>{\n    choiceOne ? setChoiceTwo(card): setChoiceOne(card)\n\n\n  }\n\n  useEffect(()=>{\n    \n    if(choiceOne&&choiceTwo){\n      setDisabled(true)\n      if(choiceOne.src ==choiceTwo.src){\n        setCards(prevCards=>{\n          return prevCards.map(card=>{\n            if(card.src===choiceOne.src){\n              \n              return{...card, matched:true}\n              \n            }\n            else{\n              \n              return card\n            }\n          })\n        })\n        resetTurn()\n      }\n      else{\n        \n        setTimeout(() =>resetTurn(),1000)\n      }\n    }\n\n  },[choiceOne,choiceTwo])\n\n\n  console.log(cards)\n\n  const resetTurn =() =>{\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns+1)\n    setDisabled(false)\n  }\n\n  useEffect(()=>{\n      shuffleCards()\n\n  },[])\n\n  return (\n    <div className=\"App\">\n      <h1>KingMatcher</h1>\n      <button onClick ={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card =>(\n          <SingleCard \n          key={card.id} \n          card = {card}\n          handleChoice={handleChoice}\n          flipped={card===choiceOne||card===choiceTwo|| card.matched}\n          disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Clicks: {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}